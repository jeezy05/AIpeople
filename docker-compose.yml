version: '3.8'

services:
  # Kong Database
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kong-data:/var/lib/postgresql/data
    networks:
      - microservices-net

  # Kong Database Migration
  kong-migration:
    image: kong:3.4
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - microservices-net

  # Kong API Gateway
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API port
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net

  # Kong Setup - Configures Kong via Admin API
  kong-setup:
    build: ./kong
    depends_on:
      kong:
        condition: service_healthy
      orchestrator:
        condition: service_started
    networks:
      - microservices-net

  # Policy Service
  policy-service:
    build: ./policy-service
    ports:
      - "5001:5001"
    environment:
      - PORT=5001
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-net

  # Retriever Agent
  retriever-agent:
    build: ./retriever-agent
    ports:
      - "5002:5002"
    environment:
      - PORT=5002
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-net

  # Processor Agent
  processor-agent:
    build: ./processor-agent
    ports:
      - "5003:5003"
    environment:
      - PORT=5003
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-net

  # Orchestrator Service
  orchestrator:
    build: ./orchestrator
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - POLICY_SERVICE_URL=http://policy-service:5001
      - RETRIEVER_SERVICE_URL=http://retriever-agent:5002
      - PROCESSOR_SERVICE_URL=http://processor-agent:5003
    volumes:
      - ./logs:/app/logs
    depends_on:
      - policy-service
      - retriever-agent
      - processor-agent
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  kong-data:

